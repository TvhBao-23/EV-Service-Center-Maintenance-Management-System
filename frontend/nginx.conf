# --- Global Settings ---
# User Nginx runs as (usually nginx or www-data, set by base image)
# user nginx;
worker_processes auto; # Tự động điều chỉnh số lượng worker process theo số CPU core
pid /var/run/nginx.pid;

# --- Event Loop Configuration ---
events {
    worker_connections 1024; # Số kết nối tối đa mỗi worker có thể xử lý đồng thời
    # multi_accept on; # Chấp nhận nhiều kết nối cùng lúc (tùy chọn)
}

# --- HTTP Server Configuration ---
http {
    # === Basic Settings ===
    include       /etc/nginx/mime.types;        # Bao gồm các kiểu MIME chuẩn
    default_type  application/octet-stream;     # Kiểu mặc định nếu không xác định được

    # === Logging Settings ===
    # Định dạng log (có thể tùy chỉnh thêm)
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main; # Ghi log truy cập
    error_log   /var/log/nginx/error.log   warn;  # Ghi log lỗi (mức warn trở lên)

    # === Performance Tuning ===
    sendfile            on; # Cho phép gửi file trực tiếp từ kernel, hiệu quả hơn
    tcp_nopush          on; # Gửi header và body trong cùng một packet (khi sendfile on)
    tcp_nodelay         on; # Gửi dữ liệu ngay lập tức, không đợi buffer đầy (tốt cho request nhỏ)
    keepalive_timeout   65; # Giữ kết nối mở trong 65 giây
    types_hash_max_size 2048;

    # === Gzip Compression ===
    gzip              on; # Bật nén Gzip
    gzip_disable      "msie6"; # Tắt cho IE6 (không cần thiết lắm ngày nay)
    gzip_vary         on; # Thêm header Vary: Accept-Encoding
    gzip_proxied      any; # Nén cả response từ proxy (nếu có)
    gzip_comp_level   6;   # Mức độ nén (1-9, 6 là cân bằng tốt)
    gzip_buffers      16 8k; # Buffer nén
    gzip_http_version 1.1; # Chỉ nén cho HTTP/1.1 trở lên
    gzip_min_length   256; # Không nén response quá nhỏ
    # Các kiểu file cần nén
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        application/x-javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript
        image/svg+xml; # Thêm SVG nếu có

    # --- Server Block ---
    server {
        listen 80 default_server; # Lắng nghe trên cổng 80, là server mặc định
        listen [::]:80 default_server; # Lắng nghe trên cổng 80 cho IPv6

        server_name _; # Chấp nhận bất kỳ hostname nào (phổ biến trong container)
        # Hoặc server_name localhost;

        # Thư mục gốc chứa file build của React
        root /usr/share/nginx/html;
        # File index mặc định
        index index.html index.htm;

        # === Health Check Endpoint ===
        location = /health { # Sử dụng '=' để khớp chính xác đường dẫn
            access_log off; # Không ghi log cho health check
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # === Serve Static Files & Handle SPA Routing ===
        location / {
            # Luôn thử phục vụ file/thư mục được yêu cầu trước
            # Nếu không tìm thấy, fallback về /index.html để React Router xử lý
            try_files $uri $uri/ /index.html;

            # Optional: Thêm header bảo mật cơ bản
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-Content-Type-Options "nosniff";
            add_header X-XSS-Protection "1; mode=block";
            add_header Referrer-Policy "strict-origin-when-cross-origin";
            # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; ..."; # (CSP cần cấu hình cẩn thận)
        }

        # === Cache Control for Static Assets (CSS, JS, Images, etc.) ===
        # Áp dụng cache dài hạn cho các file có hash trong tên (do build tool tạo ra)
        location ~* \.(?:css|js)$ {
             if ($uri ~* \.[a-f0-9]{8,}\.(css|js)$) { # Kiểm tra nếu có hash (ví dụ 8 ký tự hex)
                expires 1y;
                add_header Cache-Control "public, max-age=31536000, immutable";
             }
             # Với các file css/js không có hash, dùng try_files để fallback
              try_files $uri $uri/ /index.html;
              access_log off; # Tắt log cho file tĩnh (tùy chọn)
        }

        # Cache cho các loại ảnh và font
        location ~* \.(?:jpg|jpeg|gif|png|ico|svg|webp|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            access_log off;
        }

        # === API Proxy (Optional - Tùy thuộc cấu hình Frontend) ===
        # Nếu frontend gọi API qua Nginx (ví dụ: gọi /api/...)
        location /api/ {
            # Tên service backend trong docker-compose.yml (đã đổi thành 'backend')
            proxy_pass http://backend:8080; # Chuyển tiếp tới backend service cổng 8080

            # Các header cần thiết để backend nhận đúng thông tin client
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade; # Cho WebSocket nếu cần
            proxy_set_header Connection 'upgrade';   # Cho WebSocket nếu cần
            proxy_set_header Host $host;             # Giữ nguyên Host header
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr; # IP gốc của client
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Danh sách IP proxy đã đi qua
            proxy_set_header X-Forwarded-Proto $scheme; # Giao thức gốc (http/https)
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
        }

        # === Error Pages (Optional) ===
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        # }
    }
}